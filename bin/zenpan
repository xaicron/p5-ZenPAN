#!perl

use strict;
use warnings;
use feature 'say';
use ZenPAN;
use Capture::Tiny ':all';
use Cwd qw(realpath);
use Cwd::Guard qw(cwd_guard);
use Term::ANSIColor qw(color colored);
use File::Temp qw(tempdir);
use File::Path qw(mkpath);
use File::Which qw(which);
use File::Basename qw(basename);
use Getopt::Long qw(GetOptions);
use Module::CPANfile;
use CPAN::DistnameInfo;
use Carton;

my $zenpan_cmmand = realpath $0;

# Checking required commands
for my $cmd (qw/cpanm orepan.pl orepan_index.pl git/) {
    which $cmd or die colored(['bold red'], "ERROR: `$cmd` command not found!"), "\n";
}

our $COMMAND_DEPTH = 1;
our $COLOR_MAP     = {
    1 => 'green',
    2 => 'yellow',
    3 => 'cyan',
};

my $default_pause_id = 'DUMMY';

GetOptions(
    'V|version!' => \&show_version,
    'v|verbose!' => \my $verbose,
    'h|help!'    => \&usage,
    'p|path=s'   => \my $path,
) or short_usage();
short_usage() unless defined $path;

main: {
    my $cmd = shift @ARGV || 'add';
    my $code = main->can("cmd_$cmd");
    unless ($code) {
        say STDERR "$cmd is not a command";
        short_usage();
    }

    $path = realpath $path;
    $code->($path);

    say 'done.';
}

exit;

sub cmd_add {
    my ($path) = @_;
    mkpath $path;

    my $targets;
    if (@ARGV) {
        $targets = [ map +{ dist => $_ }, @ARGV ];
    }
    else {
        usage() unless -f 'cpanfile';
        $targets = load_cpanfile('cpanfile');
    }

    say "Addting to $path ...";
    for my $target (@$targets) {
        save_dist($path, @$target{qw/dist pause_id/});
    }

    cmd_reindex($path);
}

sub cmd_remove {
    my ($path) = @_;

    # TODO
    ...
}

sub cmd_reindex {
    my ($path) = @_;

    say 'Reindexing...';
    reindex($path);
}

sub cmd_clean {
    my ($path) = @_;

    say 'Cleaning...';
    # TODO
    ...
}

sub cmd_install {
    my ($path) = @_;
    unless (-d "$path/authors/id" && -f -r "$path/modules/02packages.details.txt.gz") {
        die "$path is not mirror";
    }

    local $ENV{PERL_CARTON_MIRROR} = "file://$path";
    run('carton', 'install');
}

sub load_cpanfile {
    my $file    = shift;
    my $targets = [];

    local $ENV{ZENPAN_MODE} = 1;

    my $spec = Module::CPANfile->load($file)->{result}{spec};
    for my $phase (@$spec{qw/build runtime/}) {
        my $requires = $phase->{requires};
        for my $name (sort keys %$requires) {
            my $version = $requires->{$name};
            my $pause_id;
            if (ref $version eq 'HASH') {
                $name     = $version->{via} if $version->{via};
                $pause_id = $version->{author};
            }
            else {
                $name .= '~'.$version;
            }

            push @$targets, {
                dist     => $name,
                $pause_id ? (pause_id => $pause_id) : (),
            };
        }
    }

    return $targets;
}

sub save_dist {
    my ($path, $dist, $pause_id) = @_;
    $pause_id ||= $default_pause_id;

    say colored ['underline bold'], "Working $dist ...";

    if ($dist =~ /\.git$/) {
        run_git($path, $pause_id, $dist);
    }
    elsif ($dist =~ m|^https?://\w+\.|) {
        run_cpanm($path, $dist);
    }
    elsif ($dist =~ /tar\.gz$/) {
        run_orepan($path, $pause_id, $dist);
    }
    else {
        run_cpanm($path, $dist);
    }
}

sub run {
    my @cmd = @_;
    my $indent = sprintf '%s> ', '==' x $COMMAND_DEPTH;
    my $indent_color = $COLOR_MAP->{$COMMAND_DEPTH} || 'bule';
    say color($indent_color), $indent, color('reset'), join q{ }, @cmd;
    if ($verbose) {
        tee_merged { !system @cmd };
    }
    else {
        capture_merged { !system @cmd };
    }
}

sub run_cpanm {
    my ($path, @args) = @_;

    local $ENV{PERL_CPANM_OPT};
    run cpanm => (
        '-L', $path,
        '--save-dists', $path,
        '--notest',
        '--quiet',
        @args,
    );
}

sub install_from_mirror {
    my ($path, $dist_path) = @_;
    my $dist = CPAN::DistnameInfo->new($dist_path);
    (my $name = $dist->dist) =~ s/-/::/g;
    my $target = sprintf '%s~%s', $name, $dist->version;
    run_cpanm $path, '--mirror', "file://$path", $target;
}

sub run_orepan {
    my ($path, $pause_id, $dist) = @_;
    run 'orepan.pl' => (
        '--destination', $path,
        '--pause', $pause_id,
        $dist,
    );

    install_from_mirror $path, $dist;
}

sub run_perl {
    my (@args) = @_;
    local $ENV{PERL_CPANM_OPT};
    run $^X, @args;
}

sub run_zenpan {
    my ($path) = @_;
    run_perl $zenpan_cmmand, '-p', $path, 'add';
}

sub run_git {
    my ($path, $pause_id, $repos) = @_;
    my $dir = tempdir CLEANUP => 1;
    my $guard = cwd_guard $dir or die "$!: $dir";

    run 'git', 'clone', $repos, "$dir/temp$$";
    my $guard2 = cwd_guard "temp$$" or die "$!: $dir";

    local $COMMAND_DEPTH = $COMMAND_DEPTH + 1;
    if (-f 'Build.PL') {
        run_perl 'Build.PL';
        unless (-f 'MANIFEST') {
            run_perl './Build', 'manifest';
        }
        if (-f 'cpanfile') {
            run_zenpan $path;
        }
        run_cpanm $path, '--installdeps', '.';
        run_perl './Build', 'distmeta';
        run_perl './Build', 'dist';
    }
    elsif (-f 'Makefile.PL') {
        run_perl 'Makefile.PL';
        unless (-f 'MANIFEST') {
            run 'make', 'manifest';
        }
        if (-f 'cpanfile') {
            run_zenpan $path;
        }
        run_cpanm $path, '--installdeps', '.';
        run 'make', 'dist';
    }
    else {
        say STDERR colored ['bold red'], "ERROR: $repos not perl module repository";
        return;
    }

    my ($dist) = <*.tar.gz>;
    unless (-f $dist) {
        say STDERR colored ['bold red'], "ERROR: cannot create dist file from $repos";
        return;
    }

    local $COMMAND_DEPTH = $COMMAND_DEPTH + 1;
    run_orepan $path, $pause_id, $dist;
}

sub reindex {
    my $path = shift;
    unlink "$path/modules/02packages.details.txt.gz";
    run 'orepan_index.pl', '--repository', $path;
}

sub short_usage {
    my $me = basename $0;
    print << "USAGE";
Usage: $me [command] -p /path/to/mirror ...

Try `zenpan --help` or `man zenpan` for more options.
USAGE

    exit 1;
}

sub usage {
    my $me = basename $0;
    print << "USAGE";
Usage: $me [command] -p /path/to/mirror ...

Options:
  --path,    -p  Save archives path. (required)
  --help,    -h  Show this message.
  --verbose, -v  Chatty print,
  --version, -V  Show version.

Command:
  add        Additional into local mirror path
  remove     Removeing modules from local mirror path
  reindex    Regen index file

  install    Execute carton install form local mirror path

Examples:

  # add modules from CPAN
  % zenpan add -p ./mirror Moo

  # add modules from cpanfile
  % zenpan add -p ./mirror

  % cat cpanfile
  # git URL
  requires 'DBIx::QueryLog' => do {
      \$ENV{ZENPAN_MODE} ? {
          via    => 'git\@github.com:xaicron/p5-DBIx-QueryLog.git',
          author => 'XAICRON', # default is DUMMY
      } : '0';
  };

  # tarballs URL
  requires 'App::envfile' => do {
      \$ENV{ZENPAN_MODE} ? {
          via => 'http://cpan.metacpan.org/authors/id/X/XA/XAICRON/App-envfile-0.06.tar.gz',
  };

  # normal case
  requires 'SQL::Format' => '0';
  requires 'WWW::Google::Cloud::Messaging' => '0.03';

  # remove modules (TODO)
  % zepnan remove -p ./mirror SQL::Format
  % zenpan remove -p ./mirror XAICRON/App-envfile-0.06.tar.gz
  % zepnan remove -p ./mirror WWW::Google::Cloud::Messaging~0.03

  # reindex
  % zenpan reindex -p ./mirror

  # carton install
  % zenpan install

USAGE

    exit;
}

sub show_version {
    my $me = basename $0;
    print << "SHOW_VERSION";
$me (ZenPAN) version $ZenPAN::VERSION
SHOW_VERSION
    exit;
}

__END__

=encoding utf8

=head1 NAME

zenpan - yet yet another DarkPAN repository manager.

=head1 SYNOPSIS

  # create local mirror
  # add modules from CPAN
  % zenpan add -p ./mirror Moo

  # add modules from cpanfile
  % zenpan add -p ./mirror

  % cat cpanfile
  # git URL
  requires 'DBIx::QueryLog' => do {
      \$ENV{ZENPAN_MODE} ? {
          via    => 'git\@github.com:xaicron/p5-DBIx-QueryLog.git',
          author => 'XAICRON', # default is DUMMY
      } : '0';
  };

  # tarballs URL
  requires 'App::envfile' => do {
      \$ENV{ZENPAN_MODE} ? {
          via => 'http://cpan.metacpan.org/authors/id/X/XA/XAICRON/App-envfile-0.06.tar.gz',
  };

  # normal case
  requires 'SQL::Format' => '0';
  requires 'WWW::Google::Cloud::Messaging' => '0.03';

  # remove modules (TODO)
  % zepnan remove -p ./mirror SQL::Format
  % zenpan remove -p ./mirror XAICRON/App-envfile-0.06.tar.gz
  % zepnan remove -p ./mirror WWW::Google::Cloud::Messaging~0.03

  # reindex
  % zenpan reindex -p ./mirror

  # and use it
  % cpanm --mirror-only --mirror=file:///path/to/mirror SQL::Format

I<< zenfile >> foramt details are SEE ALSO C<< perldoc ZenPAN >>.

=head1 DESCRIPTION

ZenPAN is simple wrapper of L<< OrePAN >> and L<< cpanm >>.
Easy to create a DarkPAN from I<< git >>, I<< tarball >>, and I<< CPAN >>.

=head1 AUTHOR

Yuji Shimada E<lt>xaicron {@} GMAIL.COME<gt>

=head1 COPYRIGHT

Copyright 2013 - Yuji Shimada

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO

=cut
